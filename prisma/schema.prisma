// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Account {
  id                 String    @id @default(cuid())
  type               String
  userId             String
  provider           String
  providerAccountId  String
  refresh_token      String?   
  access_token       String?   
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?    
  session_state      String?
  user             User     @relation(fields: [userId], references: [id] , onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id] ,onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  order         Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}




model Category{
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  title     String
  desc      String
  color     String
  img       String
  slug      String  @unique
  products  Product[]
}
model Product {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  title     String
  desc      String
  price     Decimal
  img       String?
  isFeatured Boolean @default(false)
  options  Json[]
  category Category @relation(fields: [catSlug], references: [slug])
  catSlug String
}
model Order{
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  price     Decimal
  products  Json[]
  status    String
  intent_id String? @unique
  user      User    @relation(fields: [userEmail],references: [email])
  userEmail String
}